package com.bayviewglen.ZorkProject;import java.io.File;import java.io.FileNotFoundException;import java.util.ArrayList;import java.util.HashMap;import java.util.Scanner;/** * Class Game - the main class of the "Zork" game. * * Author: Michael Kolling Version: 1.1 Date: March 2000 *  * This class is the main class of the "Zork" application. Zork is a very * simple, text based adventure game. Users can walk around some scenery. That's * all. It should really be extended to make it more interesting! *  * To play this game, create an instance of this class and call the "play" * routine. *  * This main class creates and initialises all the others: it creates all rooms, * creates the parser and starts the game. It also evaluates the commands that * the parser returns. */class Game {	boolean done8 = false;	boolean done10 = false;	boolean done19 = false;	private Audio audioModule;	private Puzzle puzzle; 	private Parser parser;	private Room currentRoom;	// This is a MASTER object that contains all of the rooms and is easily accessible.	// The key will be the name of the room -> no spaces (Use all caps and underscore -> Great Room would have a key of GREAT_ROOM	// In a hashmap keys are case sensitive.	// masterRoomMap.get("GREAT_ROOM") will return the Room Object that is the Great Room (assuming you have one).	private HashMap<String, Room> masterRoomMap;	private ArrayList<String> inventory = new ArrayList<String>();	private void initRooms(String fileName) throws Exception {		masterRoomMap = new HashMap<String, Room>();		Scanner roomScanner;		try {			HashMap<String, HashMap<String, String>> exits = new HashMap<String, HashMap<String, String>>();			roomScanner = new Scanner(new File(fileName));			while (roomScanner.hasNext()) {				Room room = new Room();				// Read the Name				String roomName = roomScanner.nextLine();				room.setRoomName(roomName.split(":")[1].trim());				// Read the Description				String roomDescription = roomScanner.nextLine();				room.setDescription(roomDescription.split(":")[1].replaceAll("<br>", "\n").trim());				// Read the Exits				String roomExits = roomScanner.nextLine();				String itemsScan = roomScanner.nextLine();				ArrayList<String> roomItems = new ArrayList<String>();				if (!itemsScan.equals("Items: None")) {					String[] itemArray = itemsScan.split(":")[1].split(",");					for (String i : itemArray) {						roomItems.add(i);					}					room.setItems(roomItems);				}								// An array of strings in the format E-RoomName				String[] rooms = roomExits.split(":")[1].split(",");				HashMap<String, String> temp = new HashMap<String, String>();				for (String s : rooms) {					temp.put(s.split("-")[0].trim(), s.split("-")[1]);				}				exits.put(roomName.substring(10).trim().toUpperCase().replaceAll(" ", "_"), temp);				// This puts the room we created (Without the exits in the masterMap)				masterRoomMap.put(roomName.toUpperCase().substring(10).trim().replaceAll(" ", "_"), room);				// Now we better set the exits.			}			for (String key : masterRoomMap.keySet()) {				Room roomTemp = masterRoomMap.get(key);				HashMap<String, String> tempExits = exits.get(key);				for (String s : tempExits.keySet()) {					// s = direction					// value is the room.					String roomName2 = tempExits.get(s.trim());					Room exitRoom = masterRoomMap.get(roomName2.toUpperCase().replaceAll(" ", "_"));					roomTemp.setExit(s.trim().charAt(0), exitRoom);				}			}			roomScanner.close();		} catch (FileNotFoundException e) {			e.printStackTrace();		}	}	/**	 * Create the game and initialise its internal map.	 */	public Game() {		try {			audioModule = new Audio();			initRooms("data/rooms.dat");			currentRoom = masterRoomMap.get("TRAINING_CENTER");		} catch (Exception e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		parser = new Parser();	}	/**	 * Main play routine. Loops until end of play.	 */	public void play() {		printWelcome();		// Enter the main command loop.  Here we repeatedly read commands and		// execute them until the game is over.		boolean finished = false;		while (!finished) {			Command command = parser.getCommand();			finished = processCommand(command);		}		System.out.println("wow, rude. thanks for playing scrub");	}	/**	 * Print out the opening message for the player.	 */	private void printWelcome() {		System.out.println();		System.out.println("Welcome to Portal");		System.out.println("Portal is an interactive bs game that we had nothing to do with. Everything you see here today is just lel");		System.out.println("Type 'help' if you need help.");		System.out.println();		System.out.println(currentRoom.longDescription());	}	/**	 * Given a command, process (that is: execute) the command. If this command	 * ends the game, true is returned, otherwise false is returned.	 */	private boolean processCommand(Command command) {		if (command.isUnknown()) {			System.out.println("I don't know what you mean...");			return false;		}		String commandWord = command.getCommandWord();		if (commandWord.equals("help"))			printHelp();		else if (commandWord.equals("go"))			goRoom(command);		else if (commandWord.equals("quit"))		{			if (command.hasSecondWord())				System.out.println("Quit what?");			else				return true; // signal that we want to quit		} else if (commandWord.equals("eat")) {			System.out.println("woah. I don't think you need to be eating anything...what I meant to say is that you're fat.");		} else if (commandWord.equals("inventory")) {			printInventory(command);		} else if (commandWord.equals("take")) {			if (!command.hasSecondWord())				System.out.println("take what?");			else {				String temp = command.getSecondWord() + (command.getThirdWord() != null ? " " + command.getThirdWord() : "");				String s = currentRoom.removeItem(temp);				if (s == null) {					System.out.println("Do you see something? I don't.");				} else {					inventory.add(s);					System.out.println(currentRoom.longDescription());					System.out.println();					System.out.println("You pick up the" + s + ", but struggle to find a place to put it.");					System.out.println("What next?");				}			}		} else if (commandWord.equals("drop")) {			if (!command.hasSecondWord())				System.out.println("drop what? Air?");			else {				String temp = command.getSecondWord() + (command.getThirdWord() != null ? " " + command.getThirdWord() : "");				String s = removeFromInventory(temp);				if (s == null) {					System.out.println("what are you dropping?");				} else {					currentRoom.items.add(s);					System.out.println(currentRoom.longDescription());					System.out.println();					System.out.println("You throw the" + s + " on the ground. ");					System.out.println("What next?");				}			}			/**/} else if (commandWord.equals("read")) {			String s = null;			if (!command.hasSecondWord())				System.out.println("Read...what?");			else {				String temp = command.getSecondWord() + (command.getThirdWord() != null ? " " + command.getThirdWord() : "");				s = read(temp); // send the user's input to the helper method			}			if (s == null) {				System.out.println("what are you reading?");			} else if (s == "letter") {				System.out.println(currentRoom.longDescription()); // customized messages for items that are readable (since there will only be a few)				System.out.println("Welcome to Abstergo Industries. This testing facility has been long abandoned since the melt down of 2028. <br> Please enjoy your stay and try your best to not die. <br> Much Appreacted, <br> Abstergo Staff.");				System.out.println("'YESSS IT WORRRKSSSSSSS'");				System.out.println("What next?");				} else if (s == "recipe4cake") {				System.out.println(currentRoom.longDescription()); // customized messages for items that are readable (since there will only be a few)				System.out.println("Find all the ingrediants on this list. Chocolate, Milk, Eggs, the blood of a virgin cow");				System.out.println("What next?");				} else if (s == "letter1") {				System.out.println(currentRoom.longDescription());				System.out.println();				System.out.println("Momentum, a function of mass and velocity, is conserved between portals. In layman's terms, speedy thing goes in, speedy thing comes out.");				System.out.println("What next?");			} else if (s == "letter2") {				System.out.println(currentRoom.longDescription());				System.out.println();				System.out.println("It’s been a month since the facility’s been destroyed. All life ceased to exist and we’ve been trapped here with that thing for god knows how long. <br> I remember it being such a normal day and by the time you’ve read this I hope you realize this was just a waste of them lelelelelelel. ");				System.out.println("What next?");			}else if (s == "letter3") {				System.out.println(currentRoom.longDescription());				System.out.println();				System.out.println(" There was even going to be a party for you. A big party that all your friends were invited to. <br> I invited your best friend, the Companion Cube. Of course, he couldn't come because you murdered him. All your other friends couldn't come, either, because you don't have any other friends because of how unlikable you are. <br> It says so right here in your personnel file: Unlikable. Liked by no one. <br> A bitter, unlikable loner, whose passing shall not be mourned. <br> Shall NOT be mourned. That's exactly what it says. Very formal. Very official. <br> It also says you were adopted, so that's funny, too.");				System.out.println("What next?");			}			/**/}		return false;	}	// implementations of user commands:	/**	 * Print out some help information. Here we print some stupid, cryptic	 * message and a list of the command words.	 */	private void printHelp() {		System.out.println("get up you lazy tub of lard ");		System.out.println();		System.out.println("Your command words are:");		parser.showCommands();	}	/**	 * Try to go to one direction. If there is an exit, enter the new room,	 * otherwise print an error message.	 */	private void goRoom(Command command) {		puzzle =  new Puzzle(); 				if (!command.hasSecondWord()) {			// if there is no second word, we don't know where to go...			System.out.println("Go where?");			return;		}		String direction = command.getSecondWord();		// Try to leave current room.		Room nextRoom = currentRoom.nextRoom(direction);				if (nextRoom == null)			System.out.println("There is no door!");		else {			currentRoom = nextRoom;			audioModule.playSound(currentRoom.getRoomName().toUpperCase().replace(" ", "_"));					if(nextRoom.getRoomName().equalsIgnoreCase("Facility8")){ 				while(done8 != true ){				System.out.println("This is your first test; remember, you don't continue if you get it wrong");				System.out.println();				puzzle.puzzle();				done8 = true; 			}			}else if(nextRoom.getRoomName().equalsIgnoreCase("Facility19")){ 				while(done10 != true ){				System.out.println("This is your second test; don't mess this up");				System.out.println();				puzzle.puzzle();				done10 = true; 			}			}else if(nextRoom.getRoomName().equalsIgnoreCase("Facility10")){ 				while(done19 != true ){				System.out.println("This is your third and final test; don't mess this up");				System.out.println();				puzzle.puzzle();				done19 = true; 			}			}										System.out.println(currentRoom.longDescription());		}	}	private void printInventory(Command command) {		if (inventory.size() > 0) {			System.out.println("You have: "); // goes through the player's inventory and prints it, assuming the size is larger than 0 			for (String s : inventory) {				System.out.println(s);			}		} else {			System.out.println("your inventory is empty"); // if inventory.size = 0, empty inventory message is displayed.		}	}	public String removeFromInventory(String s) {		for (int i = 0; i < inventory.size(); ++i) { // this method searches the player's inventory for the item they wish to drop, if it is found, it is removed			if (s.trim().equals(inventory.get(i).trim())) { //from the player's inventory and returned in order to make the message displayed when an item is dropped. 				return inventory.remove(i);			}		}		return null;	}	public String read(String s) { // helper method for the "read" section of Command		String letter = "letter"; // keeps track of all items that can be read		String letter1 = "letter1";		String letter2 = "letter2";		String letter3 = "letter3";		String recipe4cake = "recipe4cake";		for (int i = 0; i < inventory.size(); ++i) { // goes through the player's inventory and makes sure that their input matches the item they wish to read			if (s.trim().equals(inventory.get(i).trim()) && s.trim().equals(letter)) {				s = letter;				return s; // results are send back to the Command method			} else if (s.trim().equals(inventory.get(i).trim()) && s.trim().equals(letter1)) {				s = letter1;				return s;			} else if (s.trim().equals(inventory.get(i).trim()) && s.trim().equals(letter2)) {				s = letter2;				return s;			} else if (s.trim().equals(inventory.get(i).trim()) && s.trim().equals(letter3)) {				s = letter3;				return s;			}else if (s.trim().equals(inventory.get(i).trim()) && s.trim().equals(recipe4cake)) {					s = recipe4cake;					return s;							} else {			}		}		return null;	}}